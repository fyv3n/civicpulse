rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if user is verified
    function isVerified() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isVerified == true;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }

    // Helper function to check if user is moderator
    function isModerator() {
      return isAuthenticated() && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "moderator" ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin");
    }

    // Helper function to check if this is a verification update
    function isVerificationUpdate() {
      return request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['isVerified', 'updatedAt']);
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if (isAuthenticated() && (isOwner(userId) || isAdmin())) || 
                   (isVerificationUpdate() && resource.data.email == request.auth.token.email);
      allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }

    // Posts collection rules
    match /posts/{postId} {
      // Anyone can read posts
      allow read: if isAuthenticated();
      
      // Only verified users can create posts
      allow create: if isVerified() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.createdAt is timestamp;
      
      // Only post owners or moderators can update posts
      allow update: if isAuthenticated() 
        && (resource.data.userId == request.auth.uid || isModerator())
        && request.resource.data.userId == request.auth.uid;
      
      // Only post owners or moderators can delete posts
      allow delete: if isAuthenticated() 
        && (resource.data.userId == request.auth.uid || isModerator());
    }

    // Comments collection rules
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isVerified() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.createdAt is timestamp;
      allow update: if isAuthenticated() 
        && (resource.data.userId == request.auth.uid || isModerator())
        && request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() 
        && (resource.data.userId == request.auth.uid || isModerator());
    }

    // Barangay settings collection rules
    match /barangay-settings/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Moderation collection rules
    match /moderation/{document=**} {
      allow read: if isModerator();
      allow write: if isModerator();
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}